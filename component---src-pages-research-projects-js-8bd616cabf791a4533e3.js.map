{"version":3,"file":"component---src-pages-research-projects-js-8bd616cabf791a4533e3.js","mappings":"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","sources":["webpack://c4dm-website/./src/components/parallelogramHeader.js","webpack://c4dm-website/./src/components/tableCard.js","webpack://c4dm-website/./src/components/tagSelector.js","webpack://c4dm-website/./src/pages/research/projects.js"],"sourcesContent":["import React from \"react\";\n\n\nconst ParallelogramHeader = ({text,backgroundColor,textColor,className}) => {\n    return (\n      <div className={`parallelogram has-background-${backgroundColor} ${className}`}>\n        <h1 className={`is-size-2-desktop is-size-3-tablet is-size-4-mobile has-text-centered has-text-weight-bold has-text-${textColor}`}>\n          {text}\n        </h1>\n      </div>\n    );\n}\n\nexport default ParallelogramHeader;","import React from \"react\";\n\nconst TableCard = (props) => {\n    const length = Object.keys(props).length;\n    return (\n      <div className=\"card table-card columns\">\n        <div\n          className={`card-image column ${\n            length > 1 ? \"is-2-desktop\" : \"is-full\" //is 2 6ths\n          } is-full-mobile`}\n        >\n          <div className=\"media\">\n            <div className=\"media-content\">{props.first}</div>\n          </div>\n        </div>\n        {length > 1 ? (\n          <div\n            className={`card-content column ${\n              length > 2 ? \"is-one-fifth\" : \"is-four-fifths\"\n            } is-full-mobile`}\n          >\n            <div className=\"media\">\n              <div className=\"media-content\">{props.second}</div>\n            </div>\n          </div>\n        ) : undefined}\n        {length > 2 ? (\n          <div className=\"card-content column is-three-fifths is-full-mobile\">\n            <div className=\"media\">\n                <div className=\"media-content\">\n                    {props.third}\n                </div>\n            </div>\n          </div>\n        ) : undefined}\n      </div>\n    );\n\n}\n\nexport default TableCard;","import React, { useEffect, useMemo, useState } from \"react\";\n\n// Custom function to apply title case without affecting existing uppercase letters\nfunction titleCaseWithoutAffectingUppercase(str) {\n    return str\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\nconst filterData = (nodes, filter) => nodes.filter((node) => !filter ? true : node.frontmatter?.tags?.includes(filter) || node.frontmatter?.role?.includes(filter) || node.year?.includes(filter));\n\n\nconst TagSelector = ({tags,nodes,callback}) => {\n    const [selected, setSelected] = useState(false);\n\n    const memoFilter = useMemo(() => filterData(nodes,selected), [nodes,selected])\n\n    useEffect(() => {callback(memoFilter)}, [selected,filterData,memoFilter])\n\n    return (\n        <div>\n        <div className=\"buttons are-small\">\n            {tags.group.map((tag) => (\n            // If selected=='tag', then grey it out\n                <button\n                    className=\"button is-grey\"\n                    key={tag.fieldValue}\n                    onClick={() => setSelected(tag.fieldValue)}\n                    disabled={selected === tag.fieldValue}\n                >\n            {\n                // Apply titleCaseWithoutAffectingUppercase to all pages\n                titleCaseWithoutAffectingUppercase(tag.fieldValue)\n            } ({tag.totalCount})\n            </button>\n            ))}\n\n            {/* // If selected==False, then grey this out */}\n            <button \n                className=\"button\" \n                onClick={() => setSelected(false)}\n                disabled={!selected}\n            >\n                Clear Tags (x)\n            </button>\n        </div>\n        </div>\n    );\n};\n\nexport default TagSelector;\n\n// data - the data from a graphql query\n// filterTemplate â€“ the slug for the filtered template page\n// root - the slug for the unfiltered page (accessed when we clear it)","import \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport { Link, graphql, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\nimport React, { useCallback, useState } from \"react\";\nimport Layout from \"../../components/layout\";\nimport ParallelogramHeader from \"../../components/parallelogramHeader\";\nimport TableCard from \"../../components/tableCard\";\nimport TagSelector from \"../../components/tagSelector\";\nimport \"../../style/bulmacustom.scss\";\n\n// Create project card\nconst createProjectCard = (projectentry) => (\n  <Link to={projectentry.frontmatter.link}>\n    <div className=\"card-image row is-three-fifths pt-3\" key={projectentry.id}>\n      <TableCard\n        first={firstColumn(\n          projectentry.frontmatter.image.childImageSharp.gatsbyImageData\n        )}\n        second={projectInfo(\n          projectentry.frontmatter.title,\n          projectentry.frontmatter.author,\n          projectentry.frontmatter.begin,\n          projectentry.frontmatter.end,\n          projectentry.frontmatter.grant,\n          projectentry.frontmatter.amount,\n          projectentry.frontmatter.link\n        )}\n      />\n    </div>\n  </Link>\n);\n\n// Separate active and completed projects\nconst separateProjects = (projects) => {\n  const active = [];\n  const completed = [];\n  projects.forEach((project) => {project.frontmatter.status === \"active\" ? active.push(createProjectCard(project)) : completed.push(createProjectCard(project))});\n\n  return {active,completed};\n}\n\n// Return structured content for table card\nconst firstColumn = (image) => (\n  <>\n    {image ? (\n      <GatsbyImage alt=\"picture of project\" image={image} />\n    ) : (\n      <StaticImage\n        alt=\"default event picture as no event picture was specified\"\n        src=\"../../../static/defaultevent.png\"\n      />\n    )}\n  </>\n);\n\n// Post the info from query into project card\nconst projectInfo = (title, author, begin, end, grant, amount, link) => (\n              <>\n                <p className=\"title is-6\">{title || \"Name\"} </p>\n                <p className=\"subtitle is-6\">{begin}-{end}</p>\n                <p className=\"is-3\">{author}  </p>\n                <br></br>\n                <p className=\"subtitle is-6 has-text-grey-light\">{grant}&#44; {amount}</p>                \n                \n              </>\n            );\n\nconst Project = ({pageContext}) => {\n      const {\n        breadcrumb: { crumbs },\n      } = pageContext;\n\n      const data = useStaticQuery(graphql`\n      {\n        projects: allMarkdownRemark(\n          filter: { fields: { category: { eq: \"projects\" } }}\n          sort: { frontmatter: { begin: DESC } }\n        ) {\n          nodes {\n            frontmatter {\n              image {\n                childImageSharp {\n                  gatsbyImageData(layout: CONSTRAINED)\n                }\n              }\n              status\n              tags\n              title\n              author\n              begin\n              end\n              grant\n              amount\n              link\n            }\n            id\n          }\n        }\n\n        allTags: allMarkdownRemark(\n          limit: 2000\n          filter: { fields: { category: { eq: \"projects\" } }}\n          ) {\n          group(field: { frontmatter: { tags: SELECT }}) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `);\n\n    const [filteredProjects, setFilteredProjects] = useState(separateProjects(data.projects.nodes));\n\n    const getFilteredNodes = useCallback((nodes) => {\n      setFilteredProjects(separateProjects(nodes));\n    }, [setFilteredProjects]);\n\n    return (\n      <Layout name=\"Project\" crumbs={crumbs}>\n        <section className=\"section\">\n          <ParallelogramHeader\n            text=\"Research Projects\"\n            backgroundColor=\"primary\"\n            textColor=\"white\"\n            className=\"mb-6\"\n          />\n          <TagSelector\n            tags={data.allTags}\n            nodes={data.projects.nodes}\n            callback={getFilteredNodes}\n          />\n          {filteredProjects.active.length ? (\n            <>\n              <div className=\"lowerPadding\"></div>\n              <h2 className=\"subtitle\">All Active Projects</h2>\n              {filteredProjects.active}\n            </>\n          ) : undefined}\n\n          {filteredProjects.completed.length ? (\n            <>\n              <div className=\"lowerPadding\"></div>\n              <h2 className=\"subtitle\">All Completed Projects</h2>\n              {filteredProjects.completed}\n            </> ) : undefined}\n            \n        </section>\n      </Layout>\n    );\n}\n\nexport default Project;\n"],"names":["_ref","text","backgroundColor","textColor","className","React","props","length","Object","keys","first","second","undefined","third","filterData","nodes","filter","node","_node$frontmatter","_node$frontmatter$tag","_node$frontmatter2","_node$frontmatter2$ro","_node$year","frontmatter","tags","includes","role","year","callback","selected","setSelected","useState","memoFilter","useMemo","useEffect","group","map","tag","key","fieldValue","onClick","disabled","split","word","charAt","toUpperCase","slice","join","totalCount","createProjectCard","projectentry","Link","to","link","id","TableCard","firstColumn","image","childImageSharp","gatsbyImageData","projectInfo","title","author","begin","end","grant","amount","separateProjects","projects","active","completed","forEach","project","status","push","GatsbyImage","alt","StaticImage","src","__imageData","require","pageContext","breadcrumb","crumbs","data","useStaticQuery","filteredProjects","setFilteredProjects","getFilteredNodes","useCallback","Layout","name","ParallelogramHeader","TagSelector","allTags"],"sourceRoot":""}
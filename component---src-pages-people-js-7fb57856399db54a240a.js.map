{"version":3,"file":"component---src-pages-people-js-7fb57856399db54a240a.js","mappings":"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","sources":["webpack://c4dm-website/./src/components/parallelogramHeader.js","webpack://c4dm-website/./src/components/tableCard.js","webpack://c4dm-website/./src/components/tagSelector.js","webpack://c4dm-website/./src/pages/people.js"],"sourcesContent":["import React from \"react\";\n\n\nconst ParallelogramHeader = ({text,backgroundColor,textColor,className}) => {\n    return (\n      <div className={`parallelogram has-background-${backgroundColor} ${className}`}>\n        <h1 className={`is-size-2-desktop is-size-3-tablet is-size-4-mobile has-text-centered has-text-weight-bold has-text-${textColor}`}>\n          {text}\n        </h1>\n      </div>\n    );\n}\n\nexport default ParallelogramHeader;","import React from \"react\";\n\nconst TableCard = (props) => {\n    const length = Object.keys(props).length;\n    return (\n      <div className=\"card table-card columns\">\n        <div\n          className={`card-image column ${\n            length > 1 ? \"is-2-desktop\" : \"is-full\" //is 2 6ths\n          } is-full-mobile`}\n        >\n          <div className=\"media\">\n            <div className=\"media-content\">{props.first}</div>\n          </div>\n        </div>\n        {length > 1 ? (\n          <div\n            className={`card-content column ${\n              length > 2 ? \"is-one-fifth\" : \"is-four-fifths\"\n            } is-full-mobile`}\n          >\n            <div className=\"media\">\n              <div className=\"media-content\">{props.second}</div>\n            </div>\n          </div>\n        ) : undefined}\n        {length > 2 ? (\n          <div className=\"card-content column is-three-fifths is-full-mobile\">\n            <div className=\"media\">\n                <div className=\"media-content\">\n                    {props.third}\n                </div>\n            </div>\n          </div>\n        ) : undefined}\n      </div>\n    );\n\n}\n\nexport default TableCard;","import React, { useEffect, useMemo, useState } from \"react\";\n\n// Custom function to apply title case without affecting existing uppercase letters\nfunction titleCaseWithoutAffectingUppercase(str) {\n    return str\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\nconst filterData = (nodes, filter) => nodes.filter((node) => !filter ? true : node.frontmatter?.tags?.includes(filter) || node.frontmatter?.role?.includes(filter) || node.year?.includes(filter));\n\n\nconst TagSelector = ({tags,nodes,callback}) => {\n    const [selected, setSelected] = useState(false);\n\n    const memoFilter = useMemo(() => filterData(nodes,selected), [nodes,selected])\n\n    useEffect(() => {callback(memoFilter)}, [selected,filterData,memoFilter])\n\n    return (\n        <div>\n        <div className=\"buttons are-small\">\n            {tags.group.map((tag) => (\n            // If selected=='tag', then grey it out\n                <button\n                    className=\"button is-grey\"\n                    key={tag.fieldValue}\n                    onClick={() => setSelected(tag.fieldValue)}\n                    disabled={selected === tag.fieldValue}\n                >\n            {\n                // Apply titleCaseWithoutAffectingUppercase to all pages\n                titleCaseWithoutAffectingUppercase(tag.fieldValue)\n            } ({tag.totalCount})\n            </button>\n            ))}\n\n            {/* // If selected==False, then grey this out */}\n            <button \n                className=\"button\" \n                onClick={() => setSelected(false)}\n                disabled={!selected}\n            >\n                Clear Tags (x)\n            </button>\n        </div>\n        </div>\n    );\n};\n\nexport default TagSelector;\n\n// data - the data from a graphql query\n// filterTemplate â€“ the slug for the filtered template page\n// root - the slug for the unfiltered page (accessed when we clear it)","import \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport { Link, graphql, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\nimport React, { useCallback, useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport ParallelogramHeader from \"../components/parallelogramHeader\";\nimport TableCard from \"../components/tableCard\";\nimport TagSelector from \"../components/tagSelector\";\nimport \"../style/bulmacustom.scss\";\n\nconst firstColumn = (image) => (\n  <>\n    {image ? (\n      <GatsbyImage alt=\"picture of person\" image={image.childImageSharp.gatsbyImageData} />\n    ) : (\n      <StaticImage\n        alt=\"default picture as no picture was specified\"\n        src=\"../content/people/defaultprofile.png\"\n      />\n    )}\n  </>\n);\n\nconst secondColumn = (name, acadposition) => (          \n                  <>\n                    <p className=\"title is-4\">{name || \"Name\"}</p>\n                    <p className=\"subtitle is-7\">{acadposition || \"Academic Position\"}</p>\n                  </>\n                );\n                \nconst thirdColumn = (blurb) => (<p className=\"is-3\">{blurb || \"description\"}  </p>);\n\nconst People = ({pageContext}) => {\n  const {\n    breadcrumb: { crumbs },\n  } = pageContext\n    const data = useStaticQuery(graphql`\n      {people: allMarkdownRemark(\n          filter: { fields: { category: { eq: \"people\" } } }\n          sort: { fields: [frontmatter___role, frontmatter___name], order: [ASC, ASC] }\n        ) {\n          nodes {\n            frontmatter {\n              image {\n                childImageSharp {\n                  gatsbyImageData(layout: CONSTRAINED, aspectRatio: 1)\n                }\n              }\n              name\n              url\n              acadposition\n              blurb\n              themes\n              role\n            }\n            id\n          }\n        }\n        allTags: allMarkdownRemark(\n          limit: 20000\n          filter: { fields: { category: { eq: \"people\" } } }\n        ) {\n          group(field: { frontmatter: { role: SELECT } }) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `);\n\nconst groups = data.people;\n\n    const [filteredNodes, setFilteredNodes] = useState(data.people.nodes);\n\n    const getFilteredNodes = useCallback(\n      (nodes) => {\n        setFilteredNodes(nodes);\n      },\n      [setFilteredNodes]\n    );\n\n    \n\n    // some of the students have no academic role, the markdown frontmatters need to be updated, removing role and putting them in academic position\n\n    return (\n      <Layout name=\"People\" crumbs={crumbs}>\n        <section className=\"section\">\n          <ParallelogramHeader\n            text=\"People\"\n            backgroundColor=\"primary\"\n            textColor=\"white\"\n            className=\"mb-6\"\n          />\n          <TagSelector\n              tags={data.allTags}\n              nodes={data.people.nodes}\n              callback={getFilteredNodes}\n            />\n\n            {filteredNodes.map((peopleentry,index) => {\n\n              let heading;\n              if (index === 0 || peopleentry.frontmatter.role !== filteredNodes[index-1].frontmatter.role) {\n                heading = \n                <div>\n                  <p className=\"title is-4 pt-5\" >{peopleentry.frontmatter.role}</p>\n                </div>;\n              }\n              return (\n              <>\n                {heading}\n              <Link to={peopleentry.frontmatter.url}>\n                <div\n                  class=\"card-image row is-three-fifths pt-3\"\n                  key={peopleentry.id}\n                >\n                <TableCard \n                    first={firstColumn(peopleentry.frontmatter.image)} \n                    second={secondColumn(peopleentry.frontmatter.name, peopleentry.frontmatter.acadposition)} \n                    third={thirdColumn(peopleentry.frontmatter.blurb)} \n                />\n                </div>\n                </Link>\n                </>\n              )\n              }\n              )\n              }\n\n        </section>\n      </Layout>\n    );\n}\n\nexport default People;"],"names":["_ref","text","backgroundColor","textColor","className","React","props","length","Object","keys","first","second","undefined","third","filterData","nodes","filter","node","_node$frontmatter","_node$frontmatter$tag","_node$frontmatter2","_node$frontmatter2$ro","_node$year","frontmatter","tags","includes","role","year","callback","selected","setSelected","useState","memoFilter","useMemo","useEffect","group","map","tag","key","fieldValue","onClick","disabled","split","word","charAt","toUpperCase","slice","join","totalCount","pageContext","breadcrumb","crumbs","data","useStaticQuery","filteredNodes","setFilteredNodes","people","getFilteredNodes","useCallback","Layout","name","ParallelogramHeader","TagSelector","allTags","peopleentry","index","heading","Link","to","url","class","id","TableCard","image","GatsbyImage","alt","childImageSharp","gatsbyImageData","StaticImage","src","__imageData","require","acadposition","blurb"],"sourceRoot":""}
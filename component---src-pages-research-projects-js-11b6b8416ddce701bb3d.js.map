{"version":3,"file":"component---src-pages-research-projects-js-11b6b8416ddce701bb3d.js","mappings":"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","sources":["webpack://c4dm-website/./src/components/parallelogramHeader.js","webpack://c4dm-website/./src/components/tableCard.js","webpack://c4dm-website/./src/components/tagSelector.js","webpack://c4dm-website/./src/pages/research/projects.js"],"sourcesContent":["import React from \"react\";\n\n\nconst ParallelogramHeader = ({text,backgroundColor,textColor,className}) => {\n    return (\n      <div className={`parallelogram has-background-${backgroundColor} ${className}`}>\n        <h1 className={`is-size-2-desktop is-size-3-tablet is-size-4-mobile has-text-centered has-text-weight-bold has-text-${textColor}`}>\n          {text}\n        </h1>\n      </div>\n    );\n}\n\nexport default ParallelogramHeader;","import React from \"react\";\n\nconst TableCard = (props) => {\n    const length = Object.keys(props).length;\n    return (\n      <div className=\"card table-card columns\">\n        <div\n          className={`card-image column ${\n            length > 1 ? \"is-2-desktop\" : \"is-full\" //is 2 6ths\n          } is-full-mobile`}\n        >\n          <div className=\"media\">\n            <div className=\"media-content\">{props.first}</div>\n          </div>\n        </div>\n        {length > 1 ? (\n          <div\n            className={`card-content column ${\n              length > 2 ? \"is-one-fifth\" : \"is-four-fifths\"\n            } is-full-mobile`}\n          >\n            <div className=\"media\">\n              <div className=\"media-content\">{props.second}</div>\n            </div>\n          </div>\n        ) : undefined}\n        {length > 2 ? (\n          <div className=\"card-content column is-three-fifths is-full-mobile\">\n            <div className=\"media\">\n                <div className=\"media-content\">\n                    {props.third}\n                </div>\n            </div>\n          </div>\n        ) : undefined}\n      </div>\n    );\n\n}\n\nexport default TableCard;","import React, { useEffect, useMemo, useState } from \"react\";\n\n// For display, title case is applied to tags, while uppercase letters already\n// in the tag are preserved, unless there exists a version of the tag with less\n// non-starting letters capitalized. E.g. if there's \"research\" and \"Research\",\n// they'll be displayed as \"Research\" (2). If there's \"research\" and \"reseARCH\",\n// they'll be displayed as \"Research\" (2) as well.\n// However, the filter to group and sort tags and calculate counts is case-insensitive.\n// This means \"research\" and \"Research\" as well as \"Grants & sponsorships\" and\n// \"grants & Sponsorships\" will be grouped, but displayed as \"Research\" and \"Grants \n// & Sponsorships\" respectively.\n\n// Function to capitalize the first letter of each word in a string while preserving existing uppercase letters\nfunction capitalizeWordsPreserveCase(str) {\n  return str.replace(/\\b\\w+/g, function(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  });\n}\n\n// Case-insensitive filter function\nconst filterData = (nodes, filter) => nodes.filter((node) => {\n  if (!filter) return true;\n  const normalizedFilter = filter.toLowerCase();\n  return node.frontmatter?.tags?.some(tag => tag.toLowerCase() === normalizedFilter) ||\n         node.frontmatter?.role?.toLowerCase() === normalizedFilter ||\n         (node.year && node.year.toLowerCase().includes(normalizedFilter));\n});\n\nconst TagSelector = ({ tags, nodes, callback }) => {\n  const [selected, setSelected] = useState(false);\n\n  // Create a sorted map of tags, merging those that are the same when normalized\n  const sortedTagMap = useMemo(() => {\n    const map = new Map();\n    tags.group.forEach(tag => {\n      const normalizedTag = tag.fieldValue.toLowerCase();\n      if (!map.has(normalizedTag)) {\n        map.set(normalizedTag, { \n          fieldValue: tag.fieldValue,\n          totalCount: tag.totalCount,\n          variations: [{ fieldValue: tag.fieldValue, count: tag.totalCount }]\n        });\n      } else {\n        const existingTag = map.get(normalizedTag);\n        existingTag.totalCount += tag.totalCount;\n        existingTag.variations.push({ fieldValue: tag.fieldValue, count: tag.totalCount });\n        // Keep the version with the highest individual count for display\n        if (tag.totalCount > existingTag.variations[0].count) {\n          existingTag.fieldValue = tag.fieldValue;\n          existingTag.variations.sort((a, b) => b.count - a.count);\n        }\n      }\n    });\n    \n    // Convert map to array, sort by normalized tag, and convert back to map\n    return new Map([...map.entries()].sort((a, b) => a[0].localeCompare(b[0])));\n  }, [tags]);\n\n  const memoFilter = useMemo(() => filterData(nodes, selected), [nodes, selected]);\n\n  useEffect(() => {\n    callback(memoFilter);\n  }, [selected, callback, memoFilter]);\n\n  return (\n    <div>\n      <div className=\"buttons are-small\">\n        {Array.from(sortedTagMap.values()).map((tagInfo) => (\n          <button\n            className={`button ${selected && selected.toLowerCase() === tagInfo.fieldValue.toLowerCase() ? 'is-grey' : ''}`}\n            key={tagInfo.fieldValue}\n            onClick={() => setSelected(tagInfo.fieldValue)}\n            disabled={selected && selected.toLowerCase() === tagInfo.fieldValue.toLowerCase()}\n          >\n            {capitalizeWordsPreserveCase(tagInfo.fieldValue)} ({tagInfo.totalCount})\n          </button>\n        ))}\n        <button\n          className=\"button\"\n          onClick={() => setSelected(false)}\n          disabled={!selected}\n        >\n          Clear Tags (x)\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TagSelector;\n\n// data - the data from a graphql query\n// filterTemplate – the slug for the filtered template page\n// root - the slug for the unfiltered page (accessed when we clear it)","import \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport { Link, graphql, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\nimport React, { useCallback, useState } from \"react\";\nimport Layout from \"../../components/layout\";\nimport ParallelogramHeader from \"../../components/parallelogramHeader\";\nimport TableCard from \"../../components/tableCard\";\nimport TagSelector from \"../../components/tagSelector\";\nimport \"../../style/bulmacustom.scss\";\n\n// Create project card\nconst createProjectCard = (projectentry) => (\n  <Link to={projectentry.frontmatter.link}>\n    <div className=\"card-image row is-three-fifths pt-3\" key={projectentry.id}>\n      <TableCard\n        first={firstColumn(\n          projectentry.frontmatter.image.childImageSharp.gatsbyImageData\n        )}\n        second={projectInfo(\n          projectentry.frontmatter.title,\n          projectentry.frontmatter.author,\n          projectentry.frontmatter.begin,\n          projectentry.frontmatter.end,\n          projectentry.frontmatter.grant,\n          projectentry.frontmatter.amount,\n          projectentry.frontmatter.link\n        )}\n      />\n    </div>\n  </Link>\n);\n\n// Separate active and completed projects\nconst separateProjects = (projects) => {\n  const active = [];\n  const completed = [];\n  projects.forEach((project) => {project.frontmatter.status === \"active\" ? active.push(createProjectCard(project)) : completed.push(createProjectCard(project))});\n\n  return {active,completed};\n}\n\n// Return structured content for table card\nconst firstColumn = (image) => (\n  <>\n    {image ? (\n      <GatsbyImage alt=\"picture of project\" image={image} />\n    ) : (\n      <StaticImage\n        alt=\"default event picture as no event picture was specified\"\n        src=\"../../../static/defaultevent.png\"\n      />\n    )}\n  </>\n);\n\n// Post the info from query into project card\nconst projectInfo = (title, author, begin, end, grant, amount, link) => (\n              <>\n                <p className=\"title is-6\">{title || \"Name\"} </p>\n                <p className=\"subtitle is-6\">{begin}-{end}</p>\n                <p className=\"is-3\">{author}  </p>\n                <br></br>\n                <p className=\"subtitle is-6 has-text-grey-light\">{grant}&#44; {amount}</p>                \n                \n              </>\n            );\n\nconst Project = ({pageContext}) => {\n      const {\n        breadcrumb: { crumbs },\n      } = pageContext;\n\n      const data = useStaticQuery(graphql`\n      {\n        projects: allMarkdownRemark(\n          filter: { fields: { category: { eq: \"projects\" } }}\n          sort: { frontmatter: { begin: DESC } }\n        ) {\n          nodes {\n            frontmatter {\n              image {\n                childImageSharp {\n                  gatsbyImageData(layout: CONSTRAINED)\n                }\n              }\n              status\n              tags\n              title\n              author\n              begin\n              end\n              grant\n              amount\n              link\n            }\n            id\n          }\n        }\n\n        allTags: allMarkdownRemark(\n          limit: 2000\n          filter: { fields: { category: { eq: \"projects\" } }}\n          ) {\n          group(field: { frontmatter: { tags: SELECT }}) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `);\n\n    const [filteredProjects, setFilteredProjects] = useState(separateProjects(data.projects.nodes));\n\n    const getFilteredNodes = useCallback((nodes) => {\n      setFilteredProjects(separateProjects(nodes));\n    }, [setFilteredProjects]);\n\n    return (\n      <Layout name=\"Project\" crumbs={crumbs}>\n        <section className=\"section\">\n          <ParallelogramHeader\n            text=\"Research Projects\"\n            backgroundColor=\"primary\"\n            textColor=\"white\"\n            className=\"mb-6\"\n          />\n          <TagSelector\n            tags={data.allTags}\n            nodes={data.projects.nodes}\n            callback={getFilteredNodes}\n          />\n          {filteredProjects.active.length ? (\n            <>\n              <div className=\"lowerPadding\"></div>\n              <h2 className=\"subtitle\">All Active Projects</h2>\n              {filteredProjects.active}\n            </>\n          ) : undefined}\n\n          {filteredProjects.completed.length ? (\n            <>\n              <div className=\"lowerPadding\"></div>\n              <h2 className=\"subtitle\">All Completed Projects</h2>\n              {filteredProjects.completed}\n            </> ) : undefined}\n            \n        </section>\n      </Layout>\n    );\n}\n\nexport default Project;\n"],"names":["_ref","text","backgroundColor","textColor","className","React","props","length","Object","keys","first","second","undefined","third","tags","nodes","callback","selected","setSelected","useState","sortedTagMap","useMemo","map","Map","group","forEach","tag","normalizedTag","fieldValue","toLowerCase","has","existingTag","get","totalCount","variations","push","count","sort","a","b","set","_toConsumableArray","entries","localeCompare","memoFilter","filterData","filter","node","_node$frontmatter","_node$frontmatter$tag","_node$frontmatter2","_node$frontmatter2$ro","normalizedFilter","frontmatter","some","role","year","includes","useEffect","Array","from","values","tagInfo","key","onClick","disabled","replace","word","charAt","toUpperCase","slice","createProjectCard","projectentry","Link","to","link","id","TableCard","firstColumn","image","childImageSharp","gatsbyImageData","projectInfo","title","author","begin","end","grant","amount","separateProjects","projects","active","completed","project","status","GatsbyImage","alt","StaticImage","src","__imageData","require","pageContext","breadcrumb","crumbs","data","useStaticQuery","filteredProjects","setFilteredProjects","getFilteredNodes","useCallback","Layout","name","ParallelogramHeader","TagSelector","allTags"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-research-publications-js-93e41ebcbc9ef1db0d2d.js","mappings":"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","sources":["webpack://c4dm-website/./src/components/parallelogramHeader.js","webpack://c4dm-website/./src/components/tableCard.js","webpack://c4dm-website/./src/components/tagSelector.js","webpack://c4dm-website/./src/pages/research/publications.js"],"sourcesContent":["import React from \"react\";\n\n\nconst ParallelogramHeader = ({text,backgroundColor,textColor,className}) => {\n    return (\n      <div className={`parallelogram has-background-${backgroundColor} ${className}`}>\n        <h1 className={`is-size-2-desktop is-size-3-tablet is-size-4-mobile has-text-centered has-text-weight-bold has-text-${textColor}`}>\n          {text}\n        </h1>\n      </div>\n    );\n}\n\nexport default ParallelogramHeader;","import React from \"react\";\n\nconst TableCard = (props) => {\n    const length = Object.keys(props).length;\n    return (\n      <div className=\"card table-card columns\">\n        <div\n          className={`card-image column ${\n            length > 1 ? \"is-2-desktop\" : \"is-full\" //is 2 6ths\n          } is-full-mobile`}\n        >\n          <div className=\"media\">\n            <div className=\"media-content\">{props.first}</div>\n          </div>\n        </div>\n        {length > 1 ? (\n          <div\n            className={`card-content column ${\n              length > 2 ? \"is-one-fifth\" : \"is-four-fifths\"\n            } is-full-mobile`}\n          >\n            <div className=\"media\">\n              <div className=\"media-content\">{props.second}</div>\n            </div>\n          </div>\n        ) : undefined}\n        {length > 2 ? (\n          <div className=\"card-content column is-three-fifths is-full-mobile\">\n            <div className=\"media\">\n                <div className=\"media-content\">\n                    {props.third}\n                </div>\n            </div>\n          </div>\n        ) : undefined}\n      </div>\n    );\n\n}\n\nexport default TableCard;","import React, { useEffect, useMemo, useState } from \"react\";\n\n// For display, title case is applied to tags, while uppercase letters already\n// in the tag are preserved, unless there exists a version of the tag with less\n// non-starting letters capitalized. E.g. if there's \"research\" and \"Research\",\n// they'll be displayed as \"Research\" (2). If there's \"research\" and \"reseARCH\",\n// they'll be displayed as \"Research\" (2) as well.\n// However, the filter to group and sort tags and calculate counts is case-insensitive.\n// This means \"research\" and \"Research\" as well as \"Grants & sponsorships\" and\n// \"grants & Sponsorships\" will be grouped, but displayed as \"Research\" and \"Grants \n// & Sponsorships\" respectively.\n\n// Function to capitalize the first letter of each word in a string while preserving existing uppercase letters\nfunction capitalizeWordsPreserveCase(str) {\n  return str.replace(/\\b\\w+/g, function(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  });\n}\n\n// Case-insensitive filter function\nconst filterData = (nodes, filter) => nodes.filter((node) => {\n  if (!filter) return true;\n  const normalizedFilter = filter.toLowerCase();\n  return node.frontmatter?.tags?.some(tag => tag.toLowerCase() === normalizedFilter) ||\n         node.frontmatter?.role?.some(role => role.toLowerCase() === normalizedFilter) ||\n         (node.year && node.year.toLowerCase().includes(normalizedFilter));\n});\n\nconst TagSelector = ({ tags, nodes, callback }) => {\n  const [selected, setSelected] = useState(false);\n\n  // Create a sorted map of tags, merging those that are the same when normalized\n  const sortedTagMap = useMemo(() => {\n    const map = new Map();\n    tags.group.forEach(tag => {\n      const normalizedTag = tag.fieldValue.toLowerCase();\n      if (!map.has(normalizedTag)) {\n        map.set(normalizedTag, { \n          fieldValue: tag.fieldValue,\n          totalCount: tag.totalCount,\n          variations: [{ fieldValue: tag.fieldValue, count: tag.totalCount }]\n        });\n      } else {\n        const existingTag = map.get(normalizedTag);\n        existingTag.totalCount += tag.totalCount;\n        existingTag.variations.push({ fieldValue: tag.fieldValue, count: tag.totalCount });\n        // Keep the version with the highest individual count for display\n        if (tag.totalCount > existingTag.variations[0].count) {\n          existingTag.fieldValue = tag.fieldValue;\n          existingTag.variations.sort((a, b) => b.count - a.count);\n        }\n      }\n    });\n    \n    // Convert map to array, sort by normalized tag, and convert back to map\n    return new Map([...map.entries()].sort((a, b) => a[0].localeCompare(b[0])));\n  }, [tags]);\n\n  const memoFilter = useMemo(() => filterData(nodes, selected), [nodes, selected]);\n\n  useEffect(() => {\n    callback(memoFilter);\n  }, [selected, callback, memoFilter]);\n\n  return (\n    <div>\n      <div className=\"buttons are-small\">\n        {Array.from(sortedTagMap.values()).map((tagInfo) => (\n          <button\n            className={`button ${selected && selected.toLowerCase() === tagInfo.fieldValue.toLowerCase() ? 'is-grey' : ''}`}\n            key={tagInfo.fieldValue}\n            onClick={() => setSelected(tagInfo.fieldValue)}\n            disabled={selected && selected.toLowerCase() === tagInfo.fieldValue.toLowerCase()}\n          >\n            {capitalizeWordsPreserveCase(tagInfo.fieldValue)} ({tagInfo.totalCount})\n          </button>\n        ))}\n        <button\n          className=\"button\"\n          onClick={() => setSelected(false)}\n          disabled={!selected}\n        >\n          Clear Tags (x)\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TagSelector;\n\n// data - the data from a graphql query\n// filterTemplate â€“ the slug for the filtered template page\n// root - the slug for the unfiltered page (accessed when we clear it)","import \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport React, { useCallback, useState } from \"react\";\nimport Layout from \"../../components/layout\";\nimport ParallelogramHeader from \"../../components/parallelogramHeader\";\nimport TableCard from \"../../components/tableCard\";\nimport TagSelector from \"../../components/tagSelector\";\nimport \"../../style/bulmacustom.scss\";\n\n// Return structured content for table card\n// Display DOI if available, otherwise display URL, otherwise none\nconst firstColumn = (title, author, medium, year, doi, url) => (\n  <>\n    <strong className=\"is-6\">{title || \"Name\"} </strong>\n    <p className=\"is-3\">{author} </p>\n    <em>\n      {medium}, {year}\n    </em>\n    {doi ? (\n      <p>\n        DOI: <a href={`https://doi.org/${doi}`} target=\"_blank\" rel=\"noopener noreferrer\">{doi}</a>\n      </p>\n    ) : url ? (\n      <p>\n        URL: <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{url}</a>\n      </p>\n    ) : null}\n  </>\n);\n\nconst Publications = ({ pageContext }) => {\n  const {\n    breadcrumb: { crumbs },\n  } = pageContext;\n  const data = useStaticQuery(graphql`\n    query {\n      pubs: allReference(limit: 2000, sort: { year: DESC }) {\n        nodes {\n          title\n          author\n          journal\n          booktitle\n          year\n          doi\n          url\n        }\n      }\n      years: allReference(limit: 2000) {\n        group(field: { year: SELECT }) {\n          fieldValue\n          totalCount\n        }\n      }\n      about: markdownRemark(\n        fields: { category: { eq: \"about\" } }\n        fileAbsolutePath: { regex: \"/publications.md/\" }\n      ) {\n        html\n      }\n    }\n  `);\n\n  const [filteredNodes, setFilteredNodes] = useState(data.pubs.nodes);\n\n  const getFilteredNodes = useCallback(\n    (nodes) => {\n      setFilteredNodes(nodes);\n    },\n    [setFilteredNodes]\n  );\n\n  const sortedYears = {\n    ...data.years,\n    group: [...data.years.group].sort((a, b) => b.fieldValue - a.fieldValue)\n  };\n\n  return (\n    <Layout name=\"Publications\" crumbs={crumbs}>\n      <section className=\"section\">\n        <ParallelogramHeader\n          text=\"Publications\"\n          backgroundColor=\"primary\"\n          textColor=\"white\"\n          className=\"mb-6\"\n        />\n\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={{ __html: data.about.html }}\n        ></div>\n        \n        <div className=\"lowerPadding\"></div>\n\n\n        <TagSelector\n          tags={sortedYears}\n          nodes={data.pubs.nodes}\n          callback={getFilteredNodes}\n        />\n\n\n        {filteredNodes.map((pub) => (\n          <div className=\"card-image row is-three-fifths pt-3\" key={pub.title}>\n            <TableCard\n              first={firstColumn(\n                pub.title,\n                pub.author,\n                pub.journal || pub.booktitle || pub.conference,\n                pub.year,\n                pub.doi,\n                pub.url\n              )}\n            />\n          </div>\n        ))}\n      </section>\n    </Layout>\n  );\n};\n\nexport default Publications;\n"],"names":["_ref","text","backgroundColor","textColor","className","React","props","length","Object","keys","first","second","undefined","third","tags","nodes","callback","selected","setSelected","useState","sortedTagMap","useMemo","map","Map","group","forEach","tag","normalizedTag","fieldValue","toLowerCase","has","existingTag","get","totalCount","variations","push","count","sort","a","b","set","_toConsumableArray","entries","localeCompare","memoFilter","filterData","filter","node","_node$frontmatter","_node$frontmatter$tag","_node$frontmatter2","_node$frontmatter2$ro","normalizedFilter","frontmatter","some","role","year","includes","useEffect","Array","from","values","tagInfo","key","onClick","disabled","replace","word","charAt","toUpperCase","slice","pageContext","breadcrumb","crumbs","data","useStaticQuery","filteredNodes","setFilteredNodes","pubs","getFilteredNodes","useCallback","sortedYears","years","Layout","name","ParallelogramHeader","dangerouslySetInnerHTML","__html","about","html","TagSelector","pub","title","TableCard","author","medium","journal","booktitle","conference","doi","url","href","target","rel","firstColumn"],"sourceRoot":""}